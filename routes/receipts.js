const express = require('express');
const router = express.Router();
const multer = require('multer');
const { storage } = require('../config/cloudinary'); // Cloudinary storage konfigÃ¼rasyonu varsa
const upload = multer({ storage });
const Auction = require('../models/Auction');
const User = require('../models/User');
const { sendNotificationToUser } = require('../utils/firebaseAdmin');

// ğŸ”¹ SatÄ±cÄ±nÄ±n kendi bitmiÅŸ mezatlarÄ±nÄ±n dekontlarÄ±nÄ± listele
router.get('/mine/:sellerId', async (req, res) => {
  try {
    const { sellerId } = req.params;

    const auctions = await Auction.find({
      seller: sellerId,
      isEnded: true,
      receiptUploaded: true,
    })
      .populate('winner', 'name email')
      .sort({ endsAt: -1 })
      .select('title receiptUrl receiptStatus winner endsAt');

    res.status(200).json(auctions);
  } catch (err) {
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: err.message });
  }
});

// ğŸ”¹ Dekont URL'sini yÃ¼kle / kaydet + ğŸ”” Bildirim gÃ¶nder
router.put('/upload/:auctionId', async (req, res) => {
  try {
    const { auctionId } = req.params;
    const { receiptUrl } = req.body;

    if (!receiptUrl) {
      return res.status(400).json({ message: 'Dekont URL gereklidir.' });
    }

    const auction = await Auction.findByIdAndUpdate(
      auctionId,
      {
        receiptUrl,
        receiptUploaded: true,
        receiptStatus: 'pending',
      },
      { new: true }
    );

    if (!auction) return res.status(404).json({ message: 'Mezat bulunamadÄ±' });

    // ğŸ”” SatÄ±cÄ±ya push bildirimi gÃ¶nder
    const seller = await User.findById(auction.seller);
    if (seller?.notificationToken) {
      await sendNotificationToUser(
        seller.notificationToken,
        'Yeni Dekont YÃ¼klendi',
        'Kazanan alÄ±cÄ± tarafÄ±ndan bir mezat iÃ§in dekont yÃ¼klendi. LÃ¼tfen kontrol edin.'
      );
    }

    res.status(200).json({ message: 'Dekont yÃ¼klendi', auction });
  } catch (err) {
    console.error('Dekont yÃ¼kleme hatasÄ±:', err);
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: err.message });
  }
});

// ğŸ”¹ Dekontu onayla + ğŸ”” AlÄ±cÄ±ya bildirim gÃ¶nder
router.patch('/:auctionId/approve', async (req, res) => {
  try {
    const { auctionId } = req.params;

    const auction = await Auction.findByIdAndUpdate(
      auctionId,
      { receiptStatus: 'approved' },
      { new: true }
    ).populate('winner');

    if (!auction) return res.status(404).json({ message: 'Mezat bulunamadÄ±' });

    // ğŸ”” Kazanan alÄ±cÄ±ya bildirim gÃ¶nder
    const winner = auction.winner;
    if (winner?.notificationToken) {
      await sendNotificationToUser(
        winner.notificationToken,
        'Dekont OnaylandÄ±',
        'SatÄ±cÄ±, yÃ¼klediÄŸiniz dekontu onayladÄ±. SipariÅŸiniz hazÄ±rlanÄ±yor.'
      );
    }

    res.status(200).json({ message: 'Dekont onaylandÄ±', auction });
  } catch (err) {
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: err.message });
  }
});

// ğŸ”¹ Dekontu reddet + ğŸ”” AlÄ±cÄ±ya bildirim gÃ¶nder
router.patch('/:auctionId/reject', async (req, res) => {
  try {
    const { auctionId } = req.params;

   const auction = await Auction.findByIdAndUpdate(
  auctionId,
  {
    $set: {
      receiptStatus: 'rejected',
      receiptUploaded: false,
      receiptUrl: '', // veya dosya yolunun adÄ± neyse, o alanÄ± boÅŸalt
    }
  },
  { new: true }
).populate('winner');


    if (!auction) return res.status(404).json({ message: 'Mezat bulunamadÄ±' });

    // ğŸ”” Kazanan alÄ±cÄ±ya bildirim gÃ¶nder
    const winner = auction.winner;
    if (winner?.notificationToken) {
      await sendNotificationToUser(
        winner.notificationToken,
        'Dekont Reddedildi',
        'SatÄ±cÄ±, yÃ¼klediÄŸiniz dekontu reddetti. LÃ¼tfen tekrar yÃ¼kleyin.'
      );
    }

    res.status(200).json({ message: 'Dekont reddedildi', auction });
  } catch (err) {
    res.status(500).json({ message: 'Sunucu hatasÄ±', error: err.message });
  }
});


module.exports = router;
