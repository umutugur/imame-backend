// backend/controllers/userController.js

const User = require('../models/User');

// ğŸ”¹ TÃ¼m kullanÄ±cÄ±larÄ± getir
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ message: 'KullanÄ±cÄ±lar alÄ±namadÄ±', error: err.message });
  }
};

// ğŸ”¹ BanlÄ± kullanÄ±cÄ±larÄ± getir
exports.getBannedUsers = async (req, res) => {
  try {
    const users = await User.find({ isBanned: true }).sort({ createdAt: -1 });
    res.status(200).json(users);
  } catch (err) {
    res.status(500).json({ message: 'BanlÄ± kullanÄ±cÄ±lar alÄ±namadÄ±', error: err.message });
  }
};

// ğŸ”¹ KullanÄ±cÄ±yÄ± banla
exports.banUser = async (req, res) => {
  try {
    const userId = req.params.id;
    await User.findByIdAndUpdate(userId, { isBanned: true });
    res.status(200).json({ message: 'KullanÄ±cÄ± banlandÄ±' });
  } catch (err) {
    res.status(500).json({ message: 'Ban iÅŸlemi baÅŸarÄ±sÄ±z', error: err.message });
  }
};

// ğŸ”¹ KullanÄ±cÄ±yÄ± unbanla (isteÄŸe baÄŸlÄ±)
exports.unbanUser = async (req, res) => {
  try {
    const userId = req.params.id;
    await User.findByIdAndUpdate(userId, { isBanned: false });
    res.status(200).json({ message: 'KullanÄ±cÄ± banÄ± kaldÄ±rÄ±ldÄ±' });
  } catch (err) {
    res.status(500).json({ message: 'Unban iÅŸlemi baÅŸarÄ±sÄ±z', error: err.message });
  }
};

// ğŸ”¹ Bildirim token'Ä±nÄ± gÃ¼ncelle
exports.updateNotificationToken = async (req, res) => {
  try {
    const { userId, pushToken } = req.body;

    if (!userId || !pushToken) {
      return res.status(400).json({ message: 'KullanÄ±cÄ± ID ve push token gerekli.' });
    }

    const user = await User.findByIdAndUpdate(
      userId,
      { notificationToken: pushToken },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ message: 'KullanÄ±cÄ± bulunamadÄ±.' });
    }

    res.status(200).json({ message: 'Token gÃ¼ncellendi.', user });
  } catch (err) {
    res.status(500).json({ message: 'Sunucu hatasÄ±.', error: err.message });
  }
};
